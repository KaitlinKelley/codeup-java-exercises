
Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.


firstLast6([1, 2, 6]) → true
firstLast6([6, 1, 2, 3]) → true
firstLast6([13, 6, 1, 2, 3]) → false

public boolean firstLast6(int[] nums) {
  if(nums[0] == 6){
    return true;
  }else if(nums[nums.length - 1] == 6){
    return true;
  }else{
    return false;
  }
}

=============================================================


Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal.


sameFirstLast([1, 2, 3]) → false
sameFirstLast([1, 2, 3, 1]) → true
sameFirstLast([1, 2, 1]) → true

public boolean sameFirstLast(int[] nums) {
  if(nums.length >= 1 && nums[0] == nums[nums.length - 1]){
    return true;
  }
  return false;
}

==============================================================


Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.

public int[] makePi() {
  int[] pi = {3,1,4};
  return pi;
}

================================================================


Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.


commonEnd([1, 2, 3], [7, 3]) → true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) → true

public boolean commonEnd(int[] a, int[] b) {
  if(a[0] == b[0] || a[a.length-1] == b[b.length-1]){
    return true;
  }
  return false;
}

===============================================================


Given an array of ints length 3, return the sum of all the elements.


sum3([1, 2, 3]) → 6
sum3([5, 11, 2]) → 18
sum3([7, 0, 0]) → 7

public int sum3(int[] nums) {
  int num1 = nums[0] + nums[1];
  int num2 = num1 + nums[2];
  return num2;
}

===============================================================


Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!".


helloName("Bob") → "Hello Bob!"
helloName("Alice") → "Hello Alice!"
helloName("X") → "Hello X!"

public String helloName(String name) {
  return "Hello " + name + "!";
}

================================================================

Given two strings, a and b, return the result of putting them together in the order abba, e.g. "Hi" and "Bye" returns "HiByeByeHi".


makeAbba("Hi", "Bye") → "HiByeByeHi"
makeAbba("Yo", "Alice") → "YoAliceAliceYo"
makeAbba("What", "Up") → "WhatUpUpWhat"

public String makeAbba(String a, String b) {
  return a + b + b + a;
}

=================================================================


The web is built with HTML strings like "<i>Yay</i>" which draws Yay as italic text. In this example, the "i" tag makes <i> and </i> which surround the word "Yay". Given tag and word strings, create the HTML string with tags around the word, e.g. "<i>Yay</i>".


makeTags("i", "Yay") → "<i>Yay</i>"
makeTags("i", "Hello") → "<i>Hello</i>"
makeTags("cite", "Yay") → "<cite>Yay</cite>"

public String makeTags(String tag, String word) {
  return "<" + tag + ">" + word + "</" + tag + ">";
}

================================================================


When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.


cigarParty(30, false) → false
cigarParty(50, false) → true
cigarParty(70, true) → true

public boolean cigarParty(int cigars, boolean isWeekend) {
  if(cigars < 40){
    return false;
  }else if(cigars >= 40 && cigars <= 60){
    return true;
  }else if(cigars >= 40 && isWeekend){
    return true;
  }
  return false;
}

===============================================================

You and your date are trying to get a table at a restaurant. The parameter "you" is the stylishness of your clothes, in the range 0..10, and "date" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).


dateFashion(5, 10) → 2
dateFashion(5, 2) → 0
dateFashion(5, 5) → 1

public int dateFashion(int you, int date) {
  if(you <= 2 || date <= 2){
    return 0;
  }else if(you >= 8 || date >= 8){
    return 2;
  }
  return 1;
}

==============================================================


The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.


squirrelPlay(70, false) → true
squirrelPlay(95, false) → false
squirrelPlay(95, true) → true

public boolean squirrelPlay(int temp, boolean isSummer) {
  if(temp <= 90 && temp >= 60){
    return true;
  }else if(temp >= 60 && temp <= 100 && isSummer){
    return true;
  }
  return false;
}

===============================================================


You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday -- on that day, your speed can be 5 higher in all cases.


caughtSpeeding(60, false) → 0
caughtSpeeding(65, false) → 1
caughtSpeeding(65, true) → 0

public int caughtSpeeding(int speed, boolean isBirthday) {
  if(speed <= 60 || (speed <= 65 && isBirthday)){
    return 0;
  }else if(speed >= 61 && speed <= 80){
    return 1;
  }else if(speed >= 66 && speed <= 85 && isBirthday){
    return 1;
  }else if(speed >= 81 || (speed >= 86 && isBirthday)){
    return 2;
  }
  return 0;
}

=================================================================


Return true if the given non-negative number is 1 or 2 more than a multiple of 20. See also: Introduction to Mod


more20(20) → false
more20(21) → true
more20(22) → true

public boolean more20(int n) {
  if(n % 20 == 1 ||n % 20 == 2){
    return true;
  }
  return false;
}
===============================================================

